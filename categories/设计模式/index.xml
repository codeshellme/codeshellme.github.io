<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 码农充电站</title>
    <link>https://codeshellme.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 码农充电站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>@码农充电站</copyright>
    <lastBuildDate>Tue, 05 Jan 2021 21:38:52 +0800</lastBuildDate>
    
	<atom:link href="https://codeshellme.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>迭代器模式-统一集合的遍历方式</title>
      <link>https://codeshellme.github.io/2021/01/dp-iterator/</link>
      <pubDate>Tue, 05 Jan 2021 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2021/01/dp-iterator/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 今天来介绍迭代器模式（Iterator Design Pattern</description>
    </item>
    
    <item>
      <title>模板方法模式-封装一套算法流程</title>
      <link>https://codeshellme.github.io/2021/01/dp-template-method/</link>
      <pubDate>Mon, 04 Jan 2021 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2021/01/dp-template-method/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 今天来介绍模板方法模式（Template Method Design Patte</description>
    </item>
    
    <item>
      <title>外观模式-简化子系统的复杂性</title>
      <link>https://codeshellme.github.io/2021/01/dp-facade/</link>
      <pubDate>Sun, 03 Jan 2021 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2021/01/dp-facade/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 今天来介绍外观模式（Facade Design Pattern）。 1</description>
    </item>
    
    <item>
      <title>适配器模式-让不兼容的接口得以适配</title>
      <link>https://codeshellme.github.io/2020/12/dp-adapter/</link>
      <pubDate>Thu, 31 Dec 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-adapter/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 本篇来介绍适配器模式（Adapter Design Pattern）</description>
    </item>
    
    <item>
      <title>命令模式-将请求封装成对象</title>
      <link>https://codeshellme.github.io/2020/12/dp-command/</link>
      <pubDate>Wed, 30 Dec 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-command/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 本篇来介绍命令模式（Command Design Pattern），</description>
    </item>
    
    <item>
      <title>装饰者模式-动态的包装原有对象的行为</title>
      <link>https://codeshellme.github.io/2020/12/dp-decorator/</link>
      <pubDate>Tue, 29 Dec 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-decorator/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 今天来介绍装饰者模式（Decorator Design Patter</description>
    </item>
    
    <item>
      <title>观察者模式-将消息通知给观察者</title>
      <link>https://codeshellme.github.io/2020/12/dp-observer/</link>
      <pubDate>Mon, 28 Dec 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-observer/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 观察者模式（Observer Design Pattern）也被称为</description>
    </item>
    
    <item>
      <title>策略模式-定义一个算法族</title>
      <link>https://codeshellme.github.io/2020/12/dp-strategy/</link>
      <pubDate>Fri, 25 Dec 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-strategy/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 本篇来介绍策略模式（Strategy Design Pattern）</description>
    </item>
    
    <item>
      <title>针对接口编程，而不是针对实现编程</title>
      <link>https://codeshellme.github.io/2020/12/dp-code-interface/</link>
      <pubDate>Wed, 23 Dec 2020 22:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-code-interface/</guid>
      <description>“针对接口编程”的真正含义是“针对超类型编程”，它利用了多态的特性。 更明确的来说就是，一个变量 a 的声明类型应该是超类型A，所谓的超类型一般是</description>
    </item>
    
    <item>
      <title>工厂模式-将对象的创建封装起来</title>
      <link>https://codeshellme.github.io/2020/12/dp-factory/</link>
      <pubDate>Wed, 23 Dec 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-factory/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 工厂模式（Factory Design Pattern）可细分为三种</description>
    </item>
    
    <item>
      <title>单例模式-让一个类只有一个实例</title>
      <link>https://codeshellme.github.io/2020/12/dp-singleton/</link>
      <pubDate>Tue, 22 Dec 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/12/dp-singleton/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 当我们需要使得某个类只能有一个实例时，可以使用单例模式</description>
    </item>
    
    <item>
      <title>设计模式之高质量代码</title>
      <link>https://codeshellme.github.io/2020/11/dp1/</link>
      <pubDate>Thu, 12 Nov 2020 21:38:52 +0800</pubDate>
      
      <guid>https://codeshellme.github.io/2020/11/dp1/</guid>
      <description>公号：码农充电站pro 主页：https://codeshellme.github.io 如果有人问你，“什么样的代码是好代码”，你会怎样回答呢</description>
    </item>
    
  </channel>
</rss>